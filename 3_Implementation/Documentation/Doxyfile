

#include <stdio.h>
typedef struct Conversion_bcd
{
    int bcd_op[50];
    int arr_l;
} Conversion_bcd;


typedef struct Input_bcd
{
    int num;
} Input_bcd;
Conversion_bcd transformBcd(Input_bcd a);


Conversion_bcd transformBcd(Input_bcd a)
{
    int num = a.num;
    int i = 0, store_num = num;
    int arr[5];
    Conversion_bcd res;
    while (num != 0)
    {
        arr[i++] = num % 10;
        num = num / 10;
    }
    int c = 0;
    for (int j = 0; j < i; j++)
    {
        int k = 4;
        while (*(arr + j) != 0)
        {
            k--;
            *(res.bcd_op+c) = *(arr + j) % 2;
            *(arr + j) = *(arr + j) / 2;
            c++;
        }
        while (k--)
        {
            *(res.bcd_op+c) = 0;
            c++;
        }
    }
    res.arr_l = c;
    if (store_num == 0)
    {
        int k = 4;
        res.arr_l = k;
        while (k--)
        {
            *(res.bcd_op + k) = 0;
        }
    }
    return res;
}

#include <stdio.h>

typedef struct Conversion_bin
{
    int binary_op[50];
    int arr_l;
} Conversion_bin;
typedef struct Input_bin
{
    long int num;
    int base;
} Input_bin;
Conversion_bin transformBinary(Input_bin a);
Conversion_bin transformBinary(Input_bin a)
{
    int num = a.num, b = a.base;
    int k = 0, store_num = num;
    Conversion_bin res;
    while (num != 0)
    {
        *(res.binary_op+k) = num % b;
        num /= b;
        k++;
    }
    res.arr_l = k;
    if (store_num == 0)
    {
        *(res.binary_op) = 0;
        res.arr_l = 1;
    }
    return res;
}
#include <stdio.h>
#include <stdlib.h>

typedef struct Conversion_gray
{
    int gray_op[50];
    int arr_l;
} Conversion_gray;
typedef struct Input_gray
{
    int num;
} Input_gray;
Conversion_gray transformGray(Input_gray a);


Conversion_gray transformGray(Input_gray a)
{
    int num = a.num;
    int arr[50];
    int k = 0, store_num = num;
    Conversion_gray res;
    while (num != 0)
    {
        arr[k++] = num % 2;
        num = num / 2;
    }
    *(res.gray_op + k - 1) = *(arr + k - 1);
    for (int i = k - 2; i >= 0; i--)
    {
        *(res.gray_op + i) = *(arr + i) ^ *(arr + i + 1);
    }
    if (store_num == 0)
    {
        *(res.gray_op) = 0;
        k = 1;
    }
    res.arr_l = k;
    return res;
}
